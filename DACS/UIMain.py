# -*- coding: utf-8 -*-
from random import random, randint

# Form implementation generated from reading ui file 'UIv2.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from PyQt5.QtSql import QSqlDatabase, QSqlQuery
from PyQt5.QtWidgets import QVBoxLayout, QPushButton
from matplotlib.figure import Figure
from matplotlib.ticker import MaxNLocator
from unidecode import unidecode
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import csv
import matplotlib.pyplot as plt
import numpy as np
import connectDB
import UIv2
import crawlData
import upData
import taoTable

theLoaiNha = ['nha-mat-tien', 'nha-trong-hem', 'mat-bang', 'can-ho-chung-cu', 'dat-tho-cu-dat-o']
trangs = 1
tinh = "namdinh"


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(550, 20, 501, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.label_5.setFont(font)
        self.label_5.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.label_5.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_5.setAutoFillBackground(False)
        self.label_5.setStyleSheet("color: rgb(255, 200, 0);\n"
"background-color: rgb(245, 245, 245);")
        self.label_5.setObjectName("label_5")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 80, 81, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(10, 240, 321, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(255, 200, 0);\n"
"")
        self.pushButton.setObjectName("pushButton")
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(110, 120, 411, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(730, 240, 321, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(255, 200, 0);\n"
"")
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 120, 81, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox.setGeometry(QtCore.QRect(750, 200, 81, 22))
        self.spinBox.setObjectName("spinBox")
        self.comboBox_3 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_3.setGeometry(QtCore.QRect(110, 160, 411, 22))
        self.comboBox_3.setObjectName("comboBox_3")
        self.spinBox_2 = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox_2.setGeometry(QtCore.QRect(971, 200, 81, 22))
        self.spinBox_2.setObjectName("spinBox_2")
        self.comboBox_5 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_5.setGeometry(QtCore.QRect(650, 120, 401, 22))
        self.comboBox_5.setObjectName("comboBox_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(550, 120, 81, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.comboBox_4 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_4.setGeometry(QtCore.QRect(650, 80, 401, 22))
        self.comboBox_4.setObjectName("comboBox_4")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(370, 240, 321, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(255, 200, 0);\n"
"")
        self.pushButton_4.setObjectName("pushButton_4")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(110, 80, 411, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 20, 501, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.label.setFont(font)
        self.label.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setAutoFillBackground(False)
        self.label.setStyleSheet("color: rgb(255, 200, 0);\n"
"background-color: rgb(245, 245, 245);")
        self.label.setObjectName("label")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(20, 160, 81, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(550, 160, 91, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.comboBox_6 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_6.setGeometry(QtCore.QRect(650, 160, 401, 22))
        self.comboBox_6.setObjectName("comboBox_6")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(550, 80, 91, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        
        self.tableView = QtWidgets.QTableView(MainWindow)
        self.tableView.setGeometry(QtCore.QRect(10, 330, 1041, 650))
        self.tableView.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.tableView.setObjectName("tableView")
        self.model = QtGui.QStandardItemModel()
        self.tableView.setModel(self.model)

        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(880, 200, 81, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(650, 200, 81, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 832, 26))
        self.menubar.setObjectName("menubar")
        self.menufile = QtWidgets.QMenu(self.menubar)
        self.menufile.setObjectName("menufile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionL_u_tr = QtWidgets.QAction(MainWindow)
        self.actionL_u_tr.setObjectName("actionL_u_tr")
        self.menufile.addAction(self.actionL_u_tr)
        self.menubar.addAction(self.menufile.menuAction())

        layout = QVBoxLayout(self.centralwidget)

        layout.addWidget(self.chart2())
        layout.addWidget(self.chart1())

        self.pushButton.clicked.connect(self.filter_data)
        self.pushButton_4.clicked.connect(self.get_selected_row_data)
        self.actionL_u_tr.triggered.connect(self.open_luu_tru_window)
        self.pushButton_3.clicked.connect(self.crawlData)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def open_luu_tru_window(self):
        self.Form = QtWidgets.QWidget()
        self.ui = UIv2.Ui_Form()
        self.ui.setupUi(self.Form)
        self.Form.show()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_5.setText(_translate("MainWindow", "                THÔNG TIN KHÁC"))
        self.label_2.setText(_translate("MainWindow", "Tỉnh thành:"))
        self.pushButton.setText(_translate("MainWindow", "TÌM KIẾM"))
        self.pushButton_3.setText(_translate("MainWindow", "LẤY DỮ LIỆU"))
        self.label_3.setText(_translate("MainWindow", "Quận huyện:"))
        self.label_6.setText(_translate("MainWindow", "Khoảng giá:"))
        self.pushButton_4.setText(_translate("MainWindow", "LƯU THÔNG TIN"))
        self.label.setText(_translate("MainWindow", "              THÔNG TIN VỊ TRÍ"))
        self.label_4.setText(_translate("MainWindow", "Đường phố:"))
        self.label_7.setText(_translate("MainWindow", "Diện tích:"))
        self.label_10.setText(_translate("MainWindow", "Loại nhà đất:"))
        self.label_9.setText(_translate("MainWindow", "Phòng tắm:"))
        self.label_8.setText(_translate("MainWindow", "Phòng ngủ:"))
        self.menufile.setTitle(_translate("MainWindow", "File"))
        self.actionL_u_tr.setText(_translate("MainWindow", "Lưu trữ"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Chọn tỉnh thành"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Hà Nội"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Hồ Chí Minh"))
        self.comboBox.setItemText(3, _translate("MainWindow", "Đà Nẵng"))
        self.comboBox.setItemText(4, _translate("MainWindow", "Hải Phòng"))
        self.comboBox.setItemText(5, _translate("MainWindow", "Cần Thơ"))
        self.comboBox.setItemText(6, _translate("MainWindow", "An Giang"))
 


        self.comboBox_4.addItems(["Chọn vị trí nhà","Nhà trong hẻm", "Nhà mặt đường","Mặt bằng", "Đất thổ cư, đất ở"])
        self.comboBox_5.addItems(["Chọn giá", "100 - 150 triệu", "150 - 200 triệu", "200 - 300 triệu", "300 - 500 triệu", "500 - 700 triệu", "700 - 900 triệu",
                                  "1 - 2 tỷ", "2 - 3 tỷ", "3 - 4 tỷ", "4 - 6 tỷ", "6 - 10 tỷ", "10 - 20 tỷ", "20 - 30 tỷ", "30 - 40 tỷ", " 40 - 60 tỷ", "60 - 80 tỷ", "80 - 100 tỷ", "Trên 100 tỷ"])
        self.comboBox_6.addItems(["Chọn diện tích","dưới 30 m2", "30 - 50 m2", "50 - 70 m2", "70 - 100 m2", "100 - 150 m2", "150 - 200 m2",
                                  "200 - 250 m2", "250 - 300 m2", "300 - 400 m2", "400 - 600 m2", "600 - 800 m2", "800 - 100 m2", "Trên 1000 m2"])
        
        
    # Loc du lieu start
        self.comboBox.currentIndexChanged.connect(self.updateComboBox2)
        self.comboBox_2.currentIndexChanged.connect(self.updateComboBox3)

    def updateComboBox2(self):
        selected_value = self.comboBox.currentText()
        self.comboBox_2.clear()
        
        if selected_value == "Hà Nội":
            self.comboBox_2.addItems(["Chọn Quận huyện", "Quận Ba Đình", "Quận Cầu Giấy", "Quận Đống Đa", "Quận Hà Đông", "Quận Hoàn Kiếm", "Quận Tây Hồ", "Quận Long Biên", "Quận Hoàng Ma",
                                      "Quận Hai Bà Trưng", "Quận Thanh Xuân", "Quận Bắc Từ Liêm", "Quận Nam Từ Liêm", "Thị xã Sơn Tây", "Huyện Ba Vì", "Huyện Chương Mỹ",
                                      "Huyện Đan Phượng", "Huyện Đông Anh", "Huyện Gia Lâm", "Huyện Hoài Đức", "Huyện Mê Linh", "Huyện Phú Xuyên", "Huyện Phúc Thọ", 
                                      "Huyện Quốc Oai", "Huyện Sóc Sơn", "Huyện Thạch Thất", "Huyện Thanh Oai", "Huyện Thanh Trì", "Huyện Thường Tín", "Huyện Ứng Hòa"])
        elif selected_value == "Hồ Chí Minh":
            self.comboBox_2.addItems(["abc", "abc"])
        elif selected_value == "Đà Nẵng":
            self.comboBox_2.addItems(["abc", "abc"])
        elif selected_value == "Hải Phòng":
            self.comboBox_2.addItems(["abc abc", "abc"])
        elif selected_value == "Nam Định":
            self.comboBox_2.addItems(["abc", "abc"])

    def updateComboBox3(self):
        selected_value = self.comboBox_2.currentText()
        self.comboBox_3.clear()

        if selected_value == "Quận Ba Đình":
            self.comboBox_3.addItems(["Chọn đường phố","Phố Láng Hạ", "Đường Kim Mã", "Đường Đội Nhân", "Phố Giang Văn Minh", "Phố Vĩnh Phúc", "Phố Văn Cao", "Phố Đốc Ngữ", "Phố Đội cấn", "Phố Núi Trúc", "Đường Ngọc Hà", "Đường Hoàng Hoa Thám",
                                      "Đường Giảng Võ", "Phố Thành Công", "Phố Hàng Than", "Đường Đê La Thành", "Phố Thành Công", "Phố Ngọc Khánh", "Phố Nguyễn Công Hoan", "Phố Tân Ấp", "Phố Nguyễn Công Hoan", "Đường Đội Nhân",
                                      "Đường Kim Mã", "Đường Hồng Hà", "Phố Đốc Ngữ", "Đường Đào Tấn", "Phố Phan Kế Bính", "Phố Thành Công", "Phố Liễu Giai", "Phố Hàng Than", "Đường Đê La Thành",
                                       "Phố Ngọc Khánh", "Đường Khu tập thể Thành Công", "Đường Bưởi", "Phố Vĩnh Phúc", "Phố Nguyễn Thái Học", "Phố Liễu Giai", "Đường Đê La Thành", "Phố Trúc Bạch", "Phố Vạn Phúc", "Phố Giang Văn Minh",
                                       "Đường Đào Tấn"])
    
        if selected_value == "Quận Đống Đa":
            self.comboBox_3.addItems(["Phố Tây Sơn", "abc"])
    
    
    
    def extract_bedrooms(self, bedroom_str):
        import re

        # Use a regular expression to extract the number of bedrooms
        match = re.search(r'(\d+)', bedroom_str)
        if match:
            return int(match.group(0))
        return 0
    
    def load_filtered_data(self, filtered_data):
        self.model.clear()

        # Đặt lại header với thông tin từ biến header
        self.model.setHorizontalHeaderLabels(self.header)

        for row_data in filtered_data:
            try:
                items = [QtGui.QStandardItem(row_data[column]) for column in self.header]
                self.model.appendRow(items)
            except Exception as e:
                print("Error loading filtered data:", str(e))
                continue
   
        
                    
    def filter_data(self):
        tinh_da_chon = self.comboBox.currentText()
        quan_huyen_da_chon = self.comboBox_2.currentText()
        duong_pho_da_chon = self.comboBox_3.currentText()
        loai_nha_dat_da_chon = self.comboBox_4.currentText()
        so_phong_ngu_da_chon = self.spinBox.value()  # Lấy giá trị số phòng ngủ đã chọn
        so_tang_da_chon = self.spinBox_2.value()  # Lấy giá trị số tầng đã chọn
        
        
        
        selected_range = self.comboBox_6.currentText()
        
        if "dưới 30 m2" in selected_range:
            min_area, max_area = 0, 30
        elif "30 - 50 m2" in selected_range:
            min_area, max_area = 31, 50
        elif "50 - 70 m2" in selected_range:
            min_area, max_area = 51, 70
        elif "70 - 100 m2" in selected_range:
            min_area, max_area = 71, 100
        elif "100 - 150 m2" in selected_range:
            min_area, max_area = 101, 150
        elif "150 - 200 m2" in selected_range:
            min_area, max_area = 151, 200
        elif "200 - 250 m2" in selected_range:
            min_area, max_area = 201, 250
        elif "250 - 300 m2" in selected_range:
            min_area, max_area = 251, 300
        elif "300 - 400 m2" in selected_range:
            min_area, max_area = 301, 400
        elif "400 - 600 m2" in selected_range:
            min_area, max_area = 401, 600
        elif "600 - 800 m2" in selected_range:
            min_area, max_area = 601, 800
        elif "800 - 1000 m2" in selected_range:
            min_area, max_area = 801, 1000
        elif "Trên 1000 m2" in selected_range:
            min_area, max_area = 1000, 10000
        else:
            min_area, max_area = 0, float('inf')
            
            
            
            
        selected_price_range = self.comboBox_5.currentText()
    
        if "100 - 150 triệu" in selected_price_range:
            min_price, max_price = 100, 150
        elif "150 - 200 triệu" in selected_price_range:
            min_price, max_price = 151, 200
        elif "200 - 300 triệu" in selected_price_range:
            min_price, max_price = 200, 300  
        elif "300 - 500 triệu" in selected_price_range:
            min_price, max_price = 301, 500  
        elif "500 - 700 triệu" in selected_price_range:
            min_price, max_price = 501, 700  
        elif "700 - 900 triệu" in selected_price_range:
            min_price, max_price = 700, 900  
        elif "1 - 2 tỷ" in selected_price_range:
            min_price, max_price = 1, 1.9  
        elif "2 - 3 tỷ" in selected_price_range:
            min_price, max_price = 2, 2.9  
        elif "3 - 4 tỷ" in selected_price_range:
            min_price, max_price = 3, 3.9  
        elif "4 - 6 tỷ" in selected_price_range:
            min_price, max_price = 4, 5.9  
        elif "6 - 10 tỷ" in selected_price_range:
            min_price, max_price = 6, 9.9  
        elif "10 - 20 tỷ" in selected_price_range:
            min_price, max_price = 10, 19.9  
        elif "20 - 30 tỷ" in selected_price_range:
            min_price, max_price = 20, 29.9
        elif "30 - 40 tỷ" in selected_price_range:
            min_price, max_price = 30, 39.9  
        elif "40 - 60 tỷ" in selected_price_range:
            min_price, max_price = 40, 59.9  
        elif "60 - 80 tỷ" in selected_price_range:
            min_price, max_price = 60, 79.9  
        elif "80 - 100 tỷ" in selected_price_range:
            min_price, max_price = 60, 99.9  
        elif "Trên 100 tỷ" in selected_price_range:
            min_price, max_price = 99, 10000  
        else:
            min_price, max_price = 0, float('inf')

        # Đọc dữ liệu từ tệp CSV
        csv_file_path = "UIMaindata.csv"
        filtered_data = []
        bedroom_column = []
        floor_column = []


        try:
            with open(csv_file_path, 'r', newline='', encoding='utf-16') as file:
                reader = csv.DictReader(file, delimiter='\t')
                self.header = reader.fieldnames  # Lấy tên các cột từ file CSV
                so_phong_ngu = 0  
                so_tang = 0
                
      
                
                
                for row_data in reader:
                    
                    
                    if so_phong_ngu_da_chon == 0:
                        bedroom_column.append(row_data["Bedrooms"])
                    else:
                        so_phong_ngu = self.extract_bedrooms(row_data["Bedrooms"])
                                                    
                    if so_tang_da_chon == 0:
                        floor_column.append(row_data["Floor"])
                    else:
                        so_tang = self.extract_bedrooms(row_data["Floor"])
                    
                    # Lấy giá trị diện tích từ cột "Area"
                    area_str = row_data["Area"]
                    import re
                    match = re.search(r'(\d+(\.\d+)?)', area_str)
                    if match:
                        area = float(match.group(1))
                    else:
                        area = 0  
                    
                    
                    
                    import re

                    price_str = row_data["Price"]

                    
                    if "tỷ" in selected_price_range:
                        if "tr" in price_str:
                            price = 0
                        else:
                            match = re.search(r'(\d+(\.\d+)?)', price_str)
                            if match:
                                price = float(match.group(1))
                            else:
                                price = 0
                    
                    else:
                        if "tỷ" in price_str:
                            price = 0
                        else:
                            match = re.search(r'(\d+(\.\d+)?)', price_str)
                            if match:
                                price = float(match.group(1))
                            else:
                                price = 0
                    
                    
                        
                    
                    if (quan_huyen_da_chon == "Chọn Quận huyện" or quan_huyen_da_chon in row_data["Location"]) and \
                    (duong_pho_da_chon == "Chọn đường phố" or duong_pho_da_chon in row_data["Location"]) and \
                    (loai_nha_dat_da_chon == "Chọn vị trí nhà" or loai_nha_dat_da_chon in row_data["Type"]) and \
                    (min_price <= price <= max_price) and \
                    (min_area <= area <= max_area) and \
                    (so_phong_ngu == so_phong_ngu_da_chon) and \
                    (so_tang == so_tang_da_chon):

                        filtered_data.append(row_data)

        except Exception as e:
            print("Error filtering data:", str(e))

        self.load_filtered_data(filtered_data)
    
    
    
    # Loc du lieu end




    def timKiem(self):
        self.load_data_from_csv()

    def crawlData(self):
        self.indexTinh = self.comboBox.currentIndex()+1
        tinh = unidecode(self.comboBox.currentText().replace(' ', '').lower())
        try:
            taoTable.creTable(tinh)
        except Exception as e:
            print("Error:", e)
        self.driver = crawlData.createDriver()
        for i in theLoaiNha:
            crawlData.crawlUpData(self.driver, tinh, self.indexTinh , i, trangs)
        upData.upDataToCSV(tinh)
        message = QtWidgets.QMessageBox()
        message.setText("Lấy dữ liệu thành công")
        message.exec_()

    def load_data_from_csv(self):
        tinh = unidecode(self.comboBox.currentText().replace(' ', '').lower())
        try:
            upData.upDataToCSV(tinh)
        except:
            message = QtWidgets.QMessageBox()
            message.setText("Không có dữ liệu")
            message.exec_()
            pass

        csv_file_path = "UIMaindata.csv"
        try:
            with open(csv_file_path, 'r', newline='', encoding='utf-16') as file:
                reader = csv.reader(file, delimiter='\t')

                header = next(reader)

                self.model.clear()
                self.model.setHorizontalHeaderLabels(header)

                for row_data in reader:
                    try:
                        items = [QtGui.QStandardItem(field) for field in row_data]
                        self.model.appendRow(items)
                    except Exception as e:
                        print("Error loading CSV:", str(e))
                        continue
        except Exception as e:
            print("Error loading CSV:", str(e))

    def load_data_from_mySQL(self):
        db = QSqlDatabase.addDatabase("QMYSQL")
        db.setHostName("127.0.0.1")  # Địa chỉ IP hoặc tên máy chủ MySQL
        db.setPort(3306)  # Port mặc định của MySQL là 3306
        db.setDatabaseName("giadat2")  # Tên cơ sở dữ liệu MySQL
        db.setUserName("root")  # Tên người dùng MySQL
        db.setPassword("123123")

        print(db.open())
        print(db.lastError().text())
        print(db.drivers())
        if not db.open():
            print("Không thể kết nối đến MySQL")
            return

        query = QSqlQuery()
        query.exec_(f"SELECT * FROM {tinh}")
        model = QStandardItemModel()

        print(query.size())

        if query.isActive():
            while query.next():
                column_value = query.value(4)  # Thay đổi column_index bằng chỉ số của cột bạn muốn truy cập
                print(column_value)

        model.setHorizontalHeaderLabels(
            [
                'type', 'Location', 'Name', 'Price',
                'Road_Surface_Area', 'Floor', 'Bedrooms', 'Parking',
                'Area', 'Size', 'Direction',  'Link'
            ])  #

        row = 0
        while query.next():
            if int(query.value(0)) == 1.1:
                item1 = QStandardItem("Nhà mặt tiền")
            elif int(query.value(0)) == 1.2:
                item1 = QStandardItem("Nhà trong hẻm")
            elif int(query.value(0)) == 2:
                item1 = QStandardItem("Mặt bằng")
            else:
                item1 = QStandardItem("Căn hộ chung cư")

            item2 = QStandardItem(str(query.value(1)) + str(query.value(2)) + str(query.value(3)))
            item3 = QStandardItem(str(query.value(4)))
            item4 = QStandardItem(str(query.value(13)))
            item5 = QStandardItem(str(query.value(6)))
            item6 = QStandardItem(str(query.value(7)))
            item7 = QStandardItem(str(query.value(8)))
            item8 = QStandardItem(str(query.value(9)))
            item9 = QStandardItem(str(query.value(10)))
            item10 = QStandardItem(str(query.value(11)))
            item11 = QStandardItem(str(query.value(12)))
            item12 = QStandardItem(str(query.value(14)))

            model.setItem(row, 0, item1)
            model.setItem(row, 1, item2)
            model.setItem(row, 2, item3)
            model.setItem(row, 3, item4)
            model.setItem(row, 4, item5)
            model.setItem(row, 5, item6)
            model.setItem(row, 6, item7)
            model.setItem(row, 7, item8)
            model.setItem(row, 8, item9)
            model.setItem(row, 9, item10)
            model.setItem(row, 10, item11)
            model.setItem(row, 11, item12)
            row += 1

        self.tableView.setModel(model)

    def get_selected_row_data(self):
        csv_file_path = "UIdata.csv"

        selected_indexes = self.tableView.selectionModel().selectedIndexes()
        selected_rows = set()

        for index in selected_indexes:
            selected_rows.add(index.row())

        selected_data = []

        for row in selected_rows:
            row_data = [self.model.index(row, col).data() for col in range(self.model.columnCount())]
            selected_data.append(row_data)

        with open(csv_file_path, 'a', newline='', encoding='utf-16') as file:
            writer = csv.writer(file, delimiter='\t')
            print(len(selected_data))
            for row in selected_data:
                print(row)
                writer.writerow(row)        

    def chart1(self):
        x = []
        y = []
        try:
            tinh = unidecode(self.comboBox.currentText().replace(' ', '').lower())
        except:
            tinh = "hanoi"
        if tinh == " " or tinh == "":
            tinh = "hanoi"

        connection = connectDB.connect()
        cursor = connection.cursor()
        set_value = f"""
                   UPDATE {tinh}
                   SET price_clean =
                       CASE
                           WHEN Price LIKE '% tỷ' THEN CAST(SUBSTRING_INDEX(Price, ' tỷ', 1) AS DECIMAL(10,2))
                           WHEN Price LIKE '%triệu%' and CAST(SUBSTRING_INDEX(Price, ' triệu ', 1) AS DECIMAL(10,2)) >= 100 THEN round(SUBSTRING_INDEX(Price, 'triệu', 1)/1000,2)
                           WHEN Price LIKE '% tr' and CAST(SUBSTRING_INDEX(Price, ' tr ', 1) AS DECIMAL(10,2)) >= 100 THEN round(SUBSTRING_INDEX(Price, 'tr', 1)/1000, 2)
                           ELSE 0
                       END;
                   """
        cursor.execute(set_value)
        avg_price = f"""select distinct Month as `month`, Year, concat(`month`, "/", Year), round(avg(price_clean),2)
                        from {tinh}
                        where price_clean > 0
                        group by `month`, Year;"""
        cursor.execute(avg_price)
        data = cursor.fetchall()
        print(data)
        for i in data:
            x.append(i[2])
            y.append(i[3])
        connection.close()
        x_locate, y_locate, width, height = 1080, 30, 821, 381
        self.canvas = PlotCanvas(x_locate, y_locate, width, height, MainWindow)
        self.canvas.plot_data(x, y)
        self.canvas.axes.set_xlabel("Tháng")
        self.canvas.axes.set_ylabel("Giá tiền(tỷ)")
        self.canvas.axes.set_title("Giá đất trung bình tại Hà Nôội")

    def chart2(self):
        x = []
        y = []
        try:
            tinh = unidecode(self.comboBox.currentText().replace(' ', '').lower())
        except:
            tinh = "hanoi"
        if tinh == " " or tinh == "":
            tinh = "hanoi"
        connection = connectDB.connect()
        cursor = connection.cursor()
        set_value = """select Case
                        when substring_index(District, " ", 1) = "Quận" then substring_index(District, "Quận ", -1)
                        when substring_index(District, " ", 1) = "Huyện" then substring_index(District, "Huyện ", -1)
                        when substring_index(District, " ", 1) = "Thị" then substring_index(District, "Thị xã ", -1)
                        end
                     ,count(District)
                    from hanoi
                    group by District
                    """
        cursor.execute(set_value)
        data = cursor.fetchall()
        for i in data:
            x.append(i[0])
            y.append(i[1])
        connection.close()
        x_locate, y_locate, width, height = 1080, 400, 821, 570
        self.canvas1 = PlotCanvas(x_locate, y_locate, width, height, MainWindow)
        self.canvas1.plot_bar(x, y)
        self.canvas1.axes.set_xlabel("Quận/Huyện")
        self.canvas1.axes.set_ylabel("Số tin đăng")
        self.canvas1.axes.set_xticks(range(len(x)))
        self.canvas1.axes.set_xticklabels(x, rotation=45, ha="right")

class PlotCanvas(FigureCanvas):
    def __init__(self, x, y, width, height, parent=None):
        self.fig = Figure(figsize=(width / 100, height / 100), dpi=100)
        self.axes = self.fig.add_subplot(111)
        super().__init__(self.fig)

        self.setGeometry(x, y, width, height)  # Đặt vị trí và kích thước của biểu đồ
        self.setParent(parent)

    def plot_data(self, x, y):
        self.axes.plot(x, y)
        self.draw()

    def plot_bar(self, x, y):
        # Vẽ biểu đồ cột
        self.axes.bar(x, y)
        self.axes.xaxis.set_major_locator(MaxNLocator(integer=True))  # Đảm bảo trục x hiển thị số nguyên
        self.draw()
            
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
